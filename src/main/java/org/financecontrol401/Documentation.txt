
Документация для Учета Личных Финансов
Введение
Документация предоставляет описание программной системы для учета личных финансов, разработанной в рамках проекта "Finance Control 401". Система предназначена для управления балансом, категориями транзакций и самими транзакциями.

Структура проекта
Проект организован в виде нескольких пакетов:

dto: содержит классы, которые предназначены для передачи данных между различными частями программы.
Классы в этой папке обычно используются для упрощения передачи данных через сеть или между различными уровнями приложения.

entity: содержит классы, описывающие основные сущности системы, такие как баланс, категории и транзакции.

repository: включает в себя классы репозиториев для работы с данными (категориями и транзакциями).

service: содержит бизнес-логику и сервисы для работы с балансом, категориями, транзакциями и их валидацией.

validation: вспомогательные классы для валидации данных.


Пакет dto содержит следующие классы:
ClientRequest: Этот класс представляет запрос, отправленный клиентом, в контексте учета личных финансов.
Он содержит информацию о типе операции (доход/расход), категории операции, дате и сумме операции.

ClientRequestCategory: Этот класс описывает запрос пользователя для работы с категориями транзакций.
Он содержит информацию о имени категории и ее типе (доход/расход).

ClientRequestFind: Этот класс представляет запрос для поиска данных.
Он может содержать различные параметры поиска, в зависимости от контекста использования.

ClientRequestTransaction: Этот класс представляет запрос пользователя для работы с транзакциями.
Он содержит информацию о типе транзакции, категории, сумме, описании и дате транзакции.

ClientResponse: Этот класс представляет ответ, отправленный сервером, в ответ на запрос клиента.
Он содержит код ответа, информацию о результате операции и сообщение, описывающее результат.



Пакет entity
Класс Balance
Класс Balance представляет баланс пользователя и содержит следующие атрибуты и методы:
Summa: переменная типа Double, представляющая текущий баланс.
getSumma(): метод для получения текущего баланса.
setSumma(Double summa): метод для установки нового значения баланса.
toString(): метод для получения строкового представления объекта.

Класс Category
Класс Category описывает категорию транзакции и имеет следующие характеристики:
categoryName: строковая переменная, представляющая название категории.
categoryType: тип перечисления TransactionType, определяющий тип категории (доход или расход).
getCategoryName(): метод для получения названия категории.
getCategoryType(): метод для получения типа категории.
toString(): метод для получения строкового представления объекта.

Класс Transaction
Класс Transaction описывает отдельную транзакцию и содержит следующие атрибуты и методы:
idTransaction: целочисленная переменная, идентифицирующая транзакцию.
type: тип перечисления TransactionType, определяющий тип транзакции (доход или расход).
category: объект класса Category, указывающий категорию транзакции.
amount: переменная типа double, представляющая сумму транзакции.
Description: строковая переменная, описывающая транзакцию.
date: объект класса LocalDate, представляющий дату выполнения транзакции.
getIdTransaction(): метод для получения идентификатора транзакции.
getType(): метод для получения типа транзакции.
getCategory(): метод для получения категории транзакции.
getAmount(): метод для получения суммы транзакции.
getDescription(): метод для получения описания транзакции.
getDate(): метод для получения даты транзакции.
setIdTransaction(int idTransaction): метод для установки идентификатора транзакции.
toString(): метод для получения строкового представления объекта.

Перечисление TransactionType
Перечисление TransactionType определяет типы транзакций: INCOME (доход) и EXPENSE (расход).

Пакет repository
Класс CategoryRepository
Класс CategoryRepository представляет репозиторий для управления категориями транзакций и содержит следующие методы:
addCategory(Category category): метод для добавления новой категории.
getCategories(): метод для получения списка всех категорий.
findByType(TransactionType type): метод для поиска категорий по типу транзакции.
findByCategory(String categoryName): метод для поиска категории по названию.
findAll(): метод для получения всех категорий из репозитория.

Интерфейс InterfaceRepository
Интерфейс InterfaceRepository определяет методы для работы с транзакциями. Подробное описание методов приведено в их реализации.

Класс TransactionRepository
Класс TransactionRepository представляет репозиторий для управления транзакциями и содержит следующие методы:
add(Transaction newTransaction): метод для добавления новой транзакции.
findByDate(LocalDate date): метод для поиска транзакций по дате.
findByPeriod(LocalDate date1, LocalDate date2): метод для поиска транзакций в определенном периоде.
findByCategory(String categoryName): метод для поиска транзакций по категории.
findByType(TransactionType type): метод для поиска транзакций по типу.
findBySumma(Double sum): метод для поиска транзакций по сумме.
findAll(): метод для получения всех транзакций из репозитория.
findByPeriodAndCategory(LocalDate startDate, LocalDate endDate, String categoryName): метод для поиска транзакций по периоду и категории.
findByTypeAndPeriod(LocalDate startDate, LocalDate endDate, TransactionType type): метод для поиска транзакций по типу и периоду.

Пакет service
Класс BalanceService
Класс BalanceService предоставляет сервис для работы с балансом и содержит следующие методы:
`getBalance()

В классе Main реализована основная логика программы для учета личных финансов. Вот основные шаги:
Создание репозиториев: Классы CategoryRepository и TransactionRepository инициализируются для хранения категорий и транзакций соответственно.
Создание сервисов: Сервисы CategoryService и TransactionService создаются для выполнения операций с категориями и транзакциями.
Инициализация баланса: Создается BalanceService, который управляет балансом.
Создание меню: Объект Menu создается для взаимодействия с пользователем через консольное меню.
Отображение главного меню: Пользователю предлагается выбрать тип операции (приход или расход).
Отображение меню категорий: Основываясь на выборе пользователя, отображается соответствующее меню категорий.
Считывание выбора пользователя: Программа ожидает ввода пользователя для выбора типа операции и категории.
Обработка ошибок: При возникновении ошибок ввода/вывода при работе с файлами выводится стек вызовов исключения.
Этот класс является входной точкой программы и координирует работу всех остальных компонентов, обеспечивая взаимодействие с пользователем и управление данными о категориях, транзакциях и балансе.


Каждый класс имеет свои методы для выполнения определенных задач, а также соответствующие тесты для проверки их работы.

Тестирование категорий (CategoryRepositoryTest)

addCategory: Проверяет добавление категории в репозиторий и ее наличие после добавления.
findByType: Проверяет поиск категорий по типу.
findByCategory: Проверяет поиск категории по имени.
findAll: Проверяет получение всех категорий из репозитория.
Тестирование баланса (BalanceServiceTest)

testAddToBalance: Проверяет добавление суммы к балансу и корректное изменение значения баланса.
testSubtractFromBalance: Проверяет вычитание суммы из баланса и корректное изменение значения баланса.
Тестирование транзакций (TransactionServiceTest)

testAddTransaction: Проверяет добавление новой транзакции, обновление баланса и наличие транзакции в репозитории.
Тестирование репозитория транзакций (TransactionRepositoryTest)

add: Проверяет добавление транзакции в репозиторий и ее наличие после добавления.
findByDate: Проверяет поиск транзакций по дате.
Тесты проводятся с использованием JUnit Jupiter и позволяют убедиться в корректности работы каждого метода в соответствии с его функциональностью.